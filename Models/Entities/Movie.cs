using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MovieApi.Models.Entities;

/// <summary>
/// Represents a movie entity with core properties such as title, year, genre, and duration.
/// Includes an optional one-to-one relationship with <see cref="MoviesDetails"/> for extended information,
/// and a one-to-many relationship with <see cref="Review"/> representing user reviews.
/// </summary>
public class Movie
{
	/// <summary>
	/// Primary key for the movie. Value is generated by the database.
	/// </summary>
	[Key]
	[DatabaseGenerated(DatabaseGeneratedOption.Identity)] // Auto-Increment for primary key
	public int Id { get; set; }

	/// <summary>
	/// Foreign key to the associated <see cref="MoviesDetails"/> entity.
	/// </summary>
	public int? MovieDetailsId { get; set; }

	/// <summary>
	/// Title of the movie. Maximum length is 100 characters.
	/// </summary>
	[MaxLength(100)]
	public string Title { get; set; } = null!;

	/// <summary>
	/// Release year of the movie. Must be between 1850 and 9999.
	/// </summary>
	[Range(1850, 9999)]
	public int Year { get; set; }

	/// <summary>
	/// Duration of the movie in minutes. Must be between 5 and 300 minutes.
	/// </summary>
	[Range(5, 300)] 
	public int Duration { get; set; }

	/// <summary>
	/// Navigation property for related <see cref="MovieDetails"/> entity.
	/// </summary>
	[ForeignKey(nameof(MovieDetailsId))]
	public MovieDetails? MoviesDetails { get; set; } = null!;

	/// <summary>
	/// Collection of <see cref="Review"/> entities related to this movie.
	/// Represents the one-to-many relationship where a movie can have many reviews.
	/// </summary>
	public ICollection<Review> Reviews { get; set; } = new List<Review>();

	/// <summary>
	/// Navigation property representing the collection of <see cref="Actor"/> entities
	/// associated with this Movies in a many-to-many relationship.
	/// </summary>
	public ICollection<Actor> Actors { get; set; } = new List<Actor>();

	/// <summary>
	/// Navigation property representing the collection of <see cref="MovieGenre"/> entities
	/// Represents the one-to-many relationship where a movie can have many genres.
	/// </summary>
	public ICollection<MovieGenre> movieGenres { get; set; } = new List<MovieGenre>();
}
